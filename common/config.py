import aioredis
from enum import Enum
from typing import List, Optional

NOT_CONNECTED = RuntimeError(
    "connect() must be called before interacting with configuration"
)


class Value(Enum):
    Role = "role"
    TextChannel = "text_channel"


class ConfigKey(Enum):
    ManagementRole = "management_role"
    PanelAccessRole = "panel_access_role"
    RegisteredRole = "registered_role"
    AnnouncementsChannel = "announcements_channel"

    def type(self) -> Value:
        return {
            "management_role": Value.Role,
            "panel_access_role": Value.Role,
            "registered_role": Value.Role,
            "announcements_channel": Value.TextChannel,
        }[self.value]

    @staticmethod
    def exclude_autogenerated() -> List["ConfigKey"]:
        """
        The keys to not autogenerate getters/setters for
        """
        return []


class Config(object):
    def __init__(self, redis_url: str):
        self._pool: Optional[aioredis.Redis] = None
        self._url = redis_url

        # Add a getter for each key
        for key in ConfigKey:
            if key not in ConfigKey.exclude_autogenerated():
                fn = self.__get_or_set(key)
                setattr(self, key.value, fn)

    def __check_connected(self):
        """
        Check that the instance is connected to Redis
        """
        if self._pool is None:
            raise NOT_CONNECTED

    def __get_or_set(self, key: ConfigKey):
        """
        A helper function for getting or setting a value into Redis at a given key
        :param key: the key to operate at
        """

        async def inner(value: int = None) -> int:
            self.__check_connected()

            # Fetch the value
            if value is None:
                result = await self._pool.get(key.value)
                if result is None:
                    return -1
                return int(result)

            # Set the value
            await self._pool.set(key.value, value)
            return value

        # Set the function name and docstring
        inner.__name__ = key.value
        inner.__doc__ = (
            f"Get or set the {key.value.split('_')}\n"
            f":param value: the value to set, None when getting value"
        )

        return inner

    async def connect(self):
        """
        Connect to redis
        """
        self._pool = await aioredis.create_redis_pool(self._url, minsize=5, maxsize=10)

    async def disconnect(self):
        """
        Disconnect from redis and close all the connections
        """
        self.__check_connected()

        self._pool.close()
        await self._pool.wait_closed()

    async def get_multiple(self, *keys: ConfigKey) -> List[int]:
        """
        Get the values at multiple keys
        :param keys: the keys to get
        """
        # Ensure keys are unique
        unique_keys = set(keys)

        result = []

        # Get each key
        for key in unique_keys:
            # Get the values if it is not autogenerated
            if key in ConfigKey.exclude_autogenerated():
                result += await getattr(self, key.value)()

            # Get a single key and add it
            else:
                value = await getattr(self, key.value)()
                result.append(value)

        return result
