from discord import TextChannel
from fastapi import APIRouter, Depends, HTTPException
from typing import List

from common import CONFIG, SETTINGS, ConfigKey
from common.observability import with_transaction
from .models import ChannelResponse, RoleResponse, SettingUpdate, SettingResponse
from ..utils.client import with_discord
from ..utils.session import is_admin

router = APIRouter(dependencies=[Depends(is_admin)])


@router.get("/", response_model=List[SettingResponse])
@with_transaction("settings.get")
async def get():
    response = []

    # Iterate over all the config keys and get their values
    for key in ConfigKey:
        # Get the value
        result = await getattr(CONFIG, key.value)()

        # Convert the result to a string for javascript
        if isinstance(result, list):
            result = list(map(str, result))
        else:
            result = str(result)

        # Add it to the response
        response.append(SettingResponse(key=key.value, type=key.type(), value=result))

    return response


@router.put("/{key}", response_model=SettingResponse)
@with_transaction("settings.update")
async def update(key: ConfigKey, fields: SettingUpdate):
    # Check if array field
    if key in ConfigKey.exclude_autogenerated():
        # Ensure the values are integers
        try:
            values = list(map(int, fields.value))
        except ValueError:
            raise HTTPException(status_code=400, detail="values must be integers")

        # Add or remove the value
        await getattr(CONFIG, f"set_{key.value}")(values)

        # Get the resulting value
        result = await getattr(CONFIG, key.value)()

    # Update the single field
    else:
        # Ensure the value to set isn't an array
        if isinstance(fields.value, list):
            raise HTTPException(
                status_code=400, detail="list only accepted for array config keys"
            )

        try:
            # Set the new value
            await getattr(CONFIG, key.value)(fields.value)
        except ValueError:
            raise HTTPException(status_code=400, detail="value must be an integer")

        result = fields.value

    # Convert the values to a string for javascript
    if isinstance(result, list):
        result = list(map(str, result))
    else:
        result = str(result)

    return SettingResponse(key=key, type=key.type(), value=result)


@router.get("/roles", response_model=List[RoleResponse])
@with_transaction("settings.roles")
async def roles(discord=Depends(with_discord)):
    guild = await discord.fetch_guild(SETTINGS.discord_guild_id)
    discord_roles = await guild.fetch_roles()

    return [{"name": role.name, "id": str(role.id)} for role in discord_roles]


@router.get("/channels", response_model=List[ChannelResponse])
@with_transaction("settings.channels")
async def channels(discord=Depends(with_discord)):
    guild = await discord.fetch_guild(SETTINGS.discord_guild_id)
    all_channels = await guild.fetch_channels()
    text_channels = filter(lambda c: isinstance(c, TextChannel), all_channels)

    return [{"name": c.name, "id": str(c.id)} for c in text_channels]
